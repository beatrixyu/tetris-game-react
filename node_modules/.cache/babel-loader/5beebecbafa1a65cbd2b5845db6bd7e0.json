{"ast":null,"code":"import _slicedToArray from \"/home/bea/Documents/bea/tetris-game/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsCleared = _useState4[0],\n        setRowsCleared = _useState4[1]; //initial number\n\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const updateStage = prevStage => {\n      //first flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell)); //[0 retrun empty cell]//this related to the gameHelper array\n      //then draw the tetromino\n      //loop\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            //give the position of x and y\n            newStage[y + player.pos.y][x + player.pos.x] = [//value is from tetromino\n            value, \"\".concat(player.collided ? \"merged\" : \"clear\")];\n          }\n        });\n      }); //then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player.collided, player.pos.x, player.pos.y, player.tetromino, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/home/bea/Documents/bea/tetris-game/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACrBL,QAAQ,CAACE,WAAW,EAAZ,CADa;AAAA;AAAA,QACxCI,KADwC;AAAA,QACjCC,QADiC;;AAAA,qBAETP,QAAQ,CAAC,CAAD,CAFC;AAAA;AAAA,QAExCQ,WAFwC;AAAA,QAE3BC,cAF2B,kBAEI;;;AAEnDR,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AACA,UAAMC,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAChCA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAF+B,CAI5B;AAEH;AACA;;AACAX,MAAAA,MAAM,CAACY,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACnCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACf;AACAP,YAAAA,QAAQ,CAACM,CAAC,GAAGd,MAAM,CAACiB,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGhB,MAAM,CAACiB,GAAP,CAAWD,CAA1C,IAA+C,CAC7C;AACAD,YAAAA,KAF6C,YAG1Cf,MAAM,CAACkB,QAAP,GAAkB,QAAlB,GAA6B,OAHa,EAA/C;AAKD;AACF,SATD;AAUD,OAXD,EAR+B,CAoB/B;;AACA,UAAIlB,MAAM,CAACkB,QAAX,EAAqB;AACnBjB,QAAAA,WAAW;AACZ;;AACD,aAAOO,QAAP;AACD,KAzBD;;AA2BAL,IAAAA,QAAQ,CAACgB,IAAI,IAAIb,WAAW,CAACa,IAAD,CAApB,CAAR;AACD,GA9BQ,EA8BN,CACDnB,MAAM,CAACkB,QADN,EAEDlB,MAAM,CAACiB,GAAP,CAAWD,CAFV,EAGDhB,MAAM,CAACiB,GAAP,CAAWH,CAHV,EAIDd,MAAM,CAACY,SAJN,EAKDX,WALC,CA9BM,CAAT;AAqCA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CA1CM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0); //initial number\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const updateStage = prevStage => {\n      //first flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      ); //[0 retrun empty cell]//this related to the gameHelper array\n\n      //then draw the tetromino\n      //loop\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            //give the position of x and y\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              //value is from tetromino\n              value,\n              `${player.collided ? \"merged\" : \"clear\"}`\n            ];\n          }\n        });\n      });\n      //then check if we collided\n      if (player.collided) {\n        resetPlayer();\n      }\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer\n  ]);\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}