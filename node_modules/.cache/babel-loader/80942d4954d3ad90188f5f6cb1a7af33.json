{"ast":null,"code":"import _slicedToArray from \"/home/bea/Documents/bea/tetris-game/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nimport { arrayExpression } from \"babel-types\";\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsCleared = _useState4[0],\n        setRowsCleared = _useState4[1]; //initial number\n\n\n  useEffect(() => {\n    setRowsCleared(0); //to reduce the row\n\n    const sweepRows = (newStage //ack=accumulater\n    ) => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1); //unshift is to make the rows disappeared and new empty rows will show up\n\n        ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n        return ack;\n      }\n\n      ack.push(row);\n      return ack;\n    }, []); //the empty array for stocking the accumlation\n\n\n    const updateStage = prevStage => {\n      //first flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell)); //[0 retrun empty cell]//this related to the gameHelper array\n      //then draw the tetromino\n      //loop\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            //give the position of x and y\n            newStage[y + player.pos.y][x + player.pos.x] = [//value is from tetromino\n            value, \"\".concat(player.collided ? \"merged\" : \"clear\")];\n          }\n        });\n      }); //then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player.collided, player.pos.x, player.pos.y, player.tetromino, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/home/bea/Documents/bea/tetris-game/react-tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","arrayExpression","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,eAAT,QAAgC,aAAhC;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACrBN,QAAQ,CAACE,WAAW,EAAZ,CADa;AAAA;AAAA,QACxCK,KADwC;AAAA,QACjCC,QADiC;;AAAA,qBAETR,QAAQ,CAAC,CAAD,CAFC;AAAA;AAAA,QAExCS,WAFwC;AAAA,QAE3BC,cAF2B,kBAEI;;;AAEnDT,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,cAAc,CAAC,CAAD,CAAd,CADc,CAEd;;AACA,UAAMC,SAAS,GAAG,CAChBC,QADgB,CACP;AADO,SAGhBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD;AAC/CP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd,CAD+C,CAG/C;;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;AACA,eAAOR,GAAP;AACD;;AACDA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AACA,aAAOD,GAAP;AACD,KAVD,EAUG,EAVH,CAHF,CAHc,CAgBJ;;;AAEV,UAAMU,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAcX,GAAG,IAChCA,GAAG,CAACW,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAF+B,CAI5B;AAEH;AACA;;AACAZ,MAAAA,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AACnCd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACf;AACAlB,YAAAA,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC7C;AACAD,YAAAA,KAF6C,YAG1CzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAHa,EAA/C;AAKD;AACF,SATD;AAUD,OAXD,EAR+B,CAoB/B;;AACA,UAAI5B,MAAM,CAAC4B,QAAX,EAAqB;AACnB3B,QAAAA,WAAW;AACX,eAAOK,SAAS,CAACC,QAAD,CAAhB;AACD;;AACD,aAAOA,QAAP;AACD,KA1BD;;AA4BAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAD,CAApB,CAAR;AACD,GA/CQ,EA+CN,CACDb,MAAM,CAAC4B,QADN,EAED5B,MAAM,CAAC2B,GAAP,CAAWD,CAFV,EAGD1B,MAAM,CAAC2B,GAAP,CAAWH,CAHV,EAIDxB,MAAM,CAACsB,SAJN,EAKDrB,WALC,CA/CM,CAAT;AAsDA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CA3DM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nimport { arrayExpression } from \"babel-types\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0); //initial number\n\n  useEffect(() => {\n    setRowsCleared(0);\n    //to reduce the row\n    const sweepRows = (\n      newStage //ack=accumulater\n    ) =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n\n          //unshift is to make the rows disappeared and new empty rows will show up\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []); //the empty array for stocking the accumlation\n\n    const updateStage = prevStage => {\n      //first flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      ); //[0 retrun empty cell]//this related to the gameHelper array\n\n      //then draw the tetromino\n      //loop\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            //give the position of x and y\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              //value is from tetromino\n              value,\n              `${player.collided ? \"merged\" : \"clear\"}`\n            ];\n          }\n        });\n      });\n      //then check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer\n  ]);\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}