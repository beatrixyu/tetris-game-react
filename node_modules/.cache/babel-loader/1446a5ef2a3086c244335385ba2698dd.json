{"ast":null,"code":"import _defineProperty from \"/home/bea/Documents/bea/tetris-game/react-tetris/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/bea/Documents/bea/tetris-game/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useCallback } from \"react\"; //usecallbcak is the standard react hook\n\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1]; //change the direction of tertomino\n\n\n  const rotate = (matrix, dir) => {\n    // amke the rows to become columns (transpose)\n    //_ means not use actual value in this loop\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse each row to get < retated matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse()); //to do a deep clone\n\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    //to have a deep clone so that a JSON.Parse is needed\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir); //to avoid the tetrios come outside of the screen frame\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n    }\n\n    setPlayer(clonedPlayer);\n  }; //update player position\n\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    })); //pos = position\n  }; // const playerState = useState();\n  // const player = playerState[0];\n  // const setPlayer\n\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/home/bea/Documents/bea/tetris-game/react-tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","updatePlayerPos","prev","resetPlayer"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC,C,CACA;;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,gBAA5C;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACDN,QAAQ,CAAC;AACnCO,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcS,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CADP;AAAA;AAAA,QACtBC,MADsB;AAAA,QACdC,SADc,kBAO7B;;;AACA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC9B;AACA;AACA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAC9BL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CADmB,CAArB,CAH8B,CAO9B;;AACA,QAAIJ,GAAG,GAAG,CAAV,EAAa,OAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAIA,GAAG,CAACC,OAAJ,EAAxB,CAAP,CARiB,CAS9B;;AACA,WAAON,YAAY,CAACM,OAAb,EAAP;AACD,GAXD;;AAaA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQT,GAAR,KAAgB;AACnC;AACA,UAAMU,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAejB,MAAf,CAAX,CAArB;AACAc,IAAAA,YAAY,CAACjB,SAAb,GAAyBK,MAAM,CAACY,YAAY,CAACjB,SAAd,EAAyBO,GAAzB,CAA/B,CAHmC,CAKnC;;AACA,UAAMV,GAAG,GAAGoB,YAAY,CAACpB,GAAb,CAAiBC,CAA7B;AACA,QAAIuB,MAAM,GAAG,CAAb;;AACA,WAAO1B,cAAc,CAACsB,YAAD,EAAeD,KAAf,EAAsB;AAAElB,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAtB,CAArB,EAA4D;AAC1DkB,MAAAA,YAAY,CAACpB,GAAb,CAAiBC,CAAjB,IAAsBuB,MAAtB;AACD;;AACDjB,IAAAA,SAAS,CAACa,YAAD,CAAT;AACD,GAZD,CArB6B,CAmC7B;;;AACA,QAAMK,eAAe,GAAG,CAAC;AAAExB,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CE,IAAAA,SAAS,CAACmB,IAAI,sBACTA,IADS;AAEZ1B,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGyB,IAAI,CAAC1B,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGwB,IAAI,CAAC1B,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFO;AAGZG,MAAAA;AAHY,MAAL,CAAT,CAD8C,CAKzC;AACN,GAND,CApC6B,CA4C7B;AACA;AACA;;;AAEA,QAAMsB,WAAW,GAAGjC,WAAW,CAAC,MAAM;AACpCa,IAAAA,SAAS,CAAC;AACRP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEJ,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BK,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACC,MAAD,EAASmB,eAAT,EAA0BE,WAA1B,EAAuCT,YAAvC,CAAP;AACD,CAzDM","sourcesContent":["import { useState, useCallback } from \"react\";\n//usecallbcak is the standard react hook\n\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  //change the direction of tertomino\n  const rotate = (matrix, dir) => {\n    // amke the rows to become columns (transpose)\n    //_ means not use actual value in this loop\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map(col => col[index])\n    );\n\n    //reverse each row to get < retated matrix\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    //to do a deep clone\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    //to have a deep clone so that a JSON.Parse is needed\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    //to avoid the tetrios come outside of the screen frame\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n    }\n    setPlayer(clonedPlayer);\n  };\n\n  //update player position\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided\n    })); //pos = position\n  };\n\n  // const playerState = useState();\n  // const player = playerState[0];\n  // const setPlayer\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n"]},"metadata":{},"sourceType":"module"}