{"ast":null,"code":"import _slicedToArray from \"/home/bea/Documents/bea/tetris-game/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallbacks } from \"react\";\nexport const useGameStatus = rowsCleared => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        score = _useState2[0],\n        setScore = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rows = _useState4[0],\n        setRows = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        level = _useState6[0],\n        setLevel = _useState6[1];\n\n  const linePoints = [40, 100, 300, 1200]; // means from 1 line to 4 lines cleared\n\n  const calcScore = useCallbacks(() => {\n    // we have score\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]); //put var into the array to change and create initial loop\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]); //as independency\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};","map":{"version":3,"sources":["/home/bea/Documents/bea/tetris-game/react-tetris/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallbacks","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,YAA9B,QAAkD,OAAlD;AAEA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AAAA,oBAChBJ,QAAQ,CAAC,CAAD,CADQ;AAAA;AAAA,QACnCK,KADmC;AAAA,QAC5BC,QAD4B;;AAAA,qBAElBN,QAAQ,CAAC,CAAD,CAFU;AAAA;AAAA,QAEnCO,IAFmC;AAAA,QAE7BC,OAF6B;;AAAA,qBAGhBR,QAAQ,CAAC,CAAD,CAHQ;AAAA;AAAA,QAGnCS,KAHmC;AAAA,QAG5BC,QAH4B;;AAK1C,QAAMC,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB,CAL0C,CAKD;;AAEzC,QAAMC,SAAS,GAAGV,YAAY,CAAC,MAAM;AACnC;AACA,QAAIE,WAAW,GAAG,CAAlB,EAAqB;AACnBE,MAAAA,QAAQ,CAACO,IAAI,IAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAhB,CAAR;AACAD,MAAAA,OAAO,CAACK,IAAI,IAAIA,IAAI,GAAGT,WAAhB,CAAP;AACD;AACF,GAN6B,EAM3B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAN2B,CAA9B,CAP0C,CAaJ;;AAEtCH,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAFM,CAAT,CAf0C,CAiBL;;AACrC,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AACD,CAnBM","sourcesContent":["import { useState, useEffect, useCallbacks } from \"react\";\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200]; // means from 1 line to 4 lines cleared\n\n  const calcScore = useCallbacks(() => {\n    // we have score\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]); //put var into the array to change and create initial loop\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]); //as independency\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n"]},"metadata":{},"sourceType":"module"}