{"ast":null,"code":"import _slicedToArray from \"/home/bea/Documents/bea/tetris-game/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallbacks } from \"react\";\nexport const useGameStatus = rowsCleared => {\n  const _useStage = useStage(0),\n        _useStage2 = _slicedToArray(_useStage, 2),\n        score = _useStage2[0],\n        setScore = _useStage2[1];\n\n  const _useStage3 = useStage(0),\n        _useStage4 = _slicedToArray(_useStage3, 2),\n        Rows = _useStage4[0],\n        setRows = _useStage4[1];\n\n  const _useStage5 = useStage(0),\n        _useStage6 = _slicedToArray(_useStage5, 2),\n        Level = _useStage6[0],\n        setLevel = _useStage6[1];\n\n  const linePoints = [40, 100, 300, 1200]; // means from 1 line to 4 lines cleared\n\n  const calcScore = useCallback(() => {\n    // we have score\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]); //put var into the array to change and create initial loop\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]); //as independency\n\n  return [score, setScore, Rows, setRows, Level, setLevel];\n};","map":{"version":3,"sources":["/home/bea/Documents/bea/tetris-game/react-tetris/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallbacks","useGameStatus","rowsCleared","useStage","score","setScore","Rows","setRows","Level","setLevel","linePoints","calcScore","useCallback","prev","level"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,YAA9B,QAAkD,OAAlD;AAEA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AAAA,oBAChBC,QAAQ,CAAC,CAAD,CADQ;AAAA;AAAA,QACnCC,KADmC;AAAA,QAC5BC,QAD4B;;AAAA,qBAElBF,QAAQ,CAAC,CAAD,CAFU;AAAA;AAAA,QAEnCG,IAFmC;AAAA,QAE7BC,OAF6B;;AAAA,qBAGhBJ,QAAQ,CAAC,CAAD,CAHQ;AAAA;AAAA,QAGnCK,KAHmC;AAAA,QAG5BC,QAH4B;;AAK1C,QAAMC,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB,CAL0C,CAKD;;AAEzC,QAAMC,SAAS,GAAGC,WAAW,CAAC,MAAM;AAClC;AACA,QAAIV,WAAW,GAAG,CAAlB,EAAqB;AACnBG,MAAAA,QAAQ,CAACQ,IAAI,IAAIA,IAAI,GAAGH,UAAU,CAACR,WAAW,GAAG,CAAf,CAAV,IAA+BY,KAAK,GAAG,CAAvC,CAAhB,CAAR;AACAP,MAAAA,OAAO,CAACM,IAAI,IAAIA,IAAI,GAAGX,WAAhB,CAAP;AACD;AACF,GAN4B,EAM1B,CAACY,KAAD,EAAQJ,UAAR,EAAoBR,WAApB,CAN0B,CAA7B,CAP0C,CAaJ;;AAEtCH,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACA,SAAD,EAAYT,WAAZ,EAAyBE,KAAzB,CAFM,CAAT,CAf0C,CAiBL;;AACrC,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AACD,CAnBM","sourcesContent":["import { useState, useEffect, useCallbacks } from \"react\";\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useStage(0);\n  const [Rows, setRows] = useStage(0);\n  const [Level, setLevel] = useStage(0);\n\n  const linePoints = [40, 100, 300, 1200]; // means from 1 line to 4 lines cleared\n\n  const calcScore = useCallback(() => {\n    // we have score\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]); //put var into the array to change and create initial loop\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]); //as independency\n  return [score, setScore, Rows, setRows, Level, setLevel];\n};\n"]},"metadata":{},"sourceType":"module"}