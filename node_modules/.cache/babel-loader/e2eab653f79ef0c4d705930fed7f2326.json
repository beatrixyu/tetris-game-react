{"ast":null,"code":"import _slicedToArray from \"/home/bea/Documents/bea/tetris-game/react-tetris/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bea/Documents/bea/tetris-game/react-tetris/src/components/Tetris.js\";\nimport React, { useState } from \"react\";\nimport { createStage, checkCollision } from \"../gameHelpers\"; // can be removed because this part has removed to the State\n//styled components\n\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\"; //Custom Hooks\n\nimport { useInterval } from \"../hooks/useInterval\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { useGameStatus } from \"../hooks/useGameStatus\"; //components\n\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\";\n\nconst Tetris = () => {\n  // console.log(createStage());\n  //hooks\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropTime = _useState2[0],\n        setDropTime = _useState2[1]; //initialized to show the text of game\n\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1]; //when its false, then it turns to be gameover\n\n\n  const _usePlayer = usePlayer(),\n        _usePlayer2 = _slicedToArray(_usePlayer, 4),\n        player = _usePlayer2[0],\n        updatePlayerPos = _usePlayer2[1],\n        resetPlayer = _usePlayer2[2],\n        playerRotate = _usePlayer2[3];\n\n  const _useStage = useStage(player, resetPlayer),\n        _useStage2 = _slicedToArray(_useStage, 3),\n        stage = _useStage2[0],\n        setStage = _useStage2[1],\n        rowsCleared = _useStage2[2];\n\n  const _useGameStatus = useGameStatus(rowsCleared),\n        _useGameStatus2 = _slicedToArray(_useGameStatus, 6),\n        score = _useGameStatus2[0],\n        setScore = _useGameStatus2[1],\n        rows = _useGameStatus2[2],\n        setRows = _useGameStatus2[3],\n        level = _useGameStatus2[4],\n        setLevel = _useGameStatus2[5];\n\n  console.log(\"re-render\");\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  }; //dir=direction\n  // const keyUp = ({ keyCode }) => {\n  //   if (!gameOver) {\n  //     // Activate the interval again when user releases down arrow.\n  //     if (keyCode === 40) {\n  //       setDropTime(1000 / (level + 1));\n  //     }\n  //   }\n  // };\n\n\n  const startGame = () => {\n    //reset everything\n    setStage(createStage()); //to make a function to create stage\n\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  };\n\n  const drop = () => {\n    //increase level when play has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1); //for increase speed\n\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      //game over\n      if (player.pos.y < 1) {\n        console.log(\"game over!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    console.log(\"interval on\");\n\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n        drop();\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    console.log(\"interval off\");\n    setDropTime(null); // to stop the interval\n\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        //37 is the code for left arrow\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        //upkeyboard to change the transform\n        playerRotate(stage, 1);\n      }\n    }\n  }; //for set up a dropping time for the teterminos\n\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return React.createElement(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(StyledTetris, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Stage, {\n    stage: stage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, gameOver ? React.createElement(Display, {\n    gameOver: gameOver,\n    text: \"Game Over\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: \"Score:\".concat(score),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Rows:\".concat(rows),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Level:\".concat(level),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })), React.createElement(StartButton, {\n    callback: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/home/bea/Documents/bea/tetris-game/react-tetris/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","useGameStatus","Stage","Display","StartButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","console","log","movePlayer","dir","x","y","startGame","drop","prev","collided","pos","keyUp","keyCode","dropPlayer","move","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { createStage, checkCollision } from \"../gameHelpers\";\n// can be removed because this part has removed to the State\n\n//styled components\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\n\n//Custom Hooks\nimport { useInterval } from \"../hooks/useInterval\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { useGameStatus } from \"../hooks/useGameStatus\";\n\n//components\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\";\n\nconst Tetris = () => {\n  // console.log(createStage());\n\n  //hooks\n\n  const [dropTime, setDropTime] = useState(null); //initialized to show the text of game\n  const [gameOver, setGameOver] = useState(false); //when its false, then it turns to be gameover\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  console.log(\"re-render\");\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  }; //dir=direction\n\n  // const keyUp = ({ keyCode }) => {\n  //   if (!gameOver) {\n  //     // Activate the interval again when user releases down arrow.\n  //     if (keyCode === 40) {\n  //       setDropTime(1000 / (level + 1));\n  //     }\n  //   }\n  // };\n\n  const startGame = () => {\n    //reset everything\n    setStage(createStage()); //to make a function to create stage\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  };\n\n  const drop = () => {\n    //increase level when play has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n\n      //for increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      //game over\n      if (player.pos.y < 1) {\n        console.log(\"game over!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    console.log(\"interval on\");\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n        drop();\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    console.log(\"interval off\");\n    setDropTime(null); // to stop the interval\n    drop();\n  };\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        //37 is the code for left arrow\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        //upkeyboard to change the transform\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  //for set up a dropping time for the teterminos\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score:${score}`} />\n              <Display text={`Rows:${rows}`} />\n              <Display text={`Level:${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n          {/* callback instead of onClick, because inside of startbutton is {callback} props */}\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}